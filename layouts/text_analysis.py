from typing import Literal
import dash_core_components as dcc
import dash_html_components as html
from plotly.subplots import make_subplots
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
from app import app
import urllib
import networkx as nx
import plotly.graph_objects as go
from utils.data import (
    graph_reddit_gcc,
    synonym_mapping,
    names_and_synonyms_in_reddit,
)


def wordcloud_from_substance(substance_name: str, type: Literal["reddit", "wiki"]):
    name = synonym_mapping[substance_name]
    path = f"https://nootropicsnetworks.s3.eu-north-1.amazonaws.com/wordclouds/{type}/{urllib.parse.quote_plus(name)}.png"
    if type == "reddit":
        caption = "WordCloud generated from Reddit"
    else:
        caption = "WordCloud generated from Wikipedia"
    return html.Figure([html.Img(src=path, width="100%"), html.Figcaption()])


def wordclouds_from_substance(substance_name: str):
    name = synonym_mapping[substance_name]
    wc_wiki = wordcloud_from_substance(substance_name=substance_name, type="wiki")

    if name in set(graph_reddit_gcc.nodes()):
        res = [
            dbc.Col(wc_wiki, width=6),
            dbc.Col(
                wordcloud_from_substance(substance_name=substance_name, type="reddit"),
                width=6,
            ),
        ]
    else:
        res = [
            dbc.Col(
                wordcloud_from_substance(substance_name=substance_name, type="wiki"),
                width=6,
            ),
        ]
    return res


def sentiment_histograms_from_substance(graph: nx.Graph, substance: str):
    name = synonym_mapping[substance]
    polarities = graph.nodes[name]["polarity"]
    subjectivities = graph.nodes[name]["subjectivity"]
    plot = make_subplots(
        rows=2,
        cols=1,
        subplot_titles=(
            "Polarity",
            "Subjectivity",
        ),
    )
    plot.add_trace(
        go.Histogram(x=polarities, xbins_size=0.1, marker_color="#ff4401"),
        row=1,
        col=1,
    )
    plot.add_trace(
        go.Histogram(x=subjectivities, xbins_size=0.05, marker_color="#007bd9"),
        row=2,
        col=1,
    )
    plot.update_xaxes(range=[-1, 1], row=1, col=1)
    plot.update_xaxes(range=[0, 1], row=2, col=1)
    plot.update_layout(showlegend=False)
    return plot


text_analysis_layout = html.Div(
    [
        html.H2("Text Analysis"),
        html.P(
            "Last but not least, the most fun part: what, if anything, can we learn by \
            analizing the text of Reddit posts (and wikipedia pages)? We'll present some results first - \
            but if you just want to explore data about the substances you're interested in, \
            scroll to the bottom of the page where there is an interactive playground."
        ),
        html.Hr(),
        html.H3("A case study: Everyone's Favourite Drug"),
        html.P(
            "To illustrate and motivate our investigation, let's take the most popular \
            nootropic in he world as an example: Caffeine. To begin with, let's generate wordclouds for its wikipedia entry and for Reddit posts that mention it."
        ),
        html.H4("Caffeinated wordclouds"),
        html.P(
            "The wordclouds below are both generated by comparing how often\
             a given word appears in the wikipedia page/on Reddit posts about a\
             specific substance, compared with how often that same word appears on ALL pages or posts (the technicalities are a bit more complicated than that - see the explainer notebook for more info)."
        ),
        dbc.Container(dbc.Row(children=wordclouds_from_substance("caffeine"))),
        html.P(
            [
                "There are some interesting differences between the wordclouds generated from wikipedia and from Reddit.\
                        Interestingly, while both clouds contain names of other drugs/molecules, the way that those chemicals are related to caffeine is different:\
                        the Wikipedia cloud, those are related to the properties of Caffeine: \
                        'adenosine' (caffeine is an adenosine receptor antagonist), 'theobromine' and 'xanthine' (two metabolic products of caffeine)\
                        etc. On the other hand, the chemicals that apper on the Reddit cloud are mostly substances that are taken together or have similar effects: \
                        'modafinil' (another stimulant), 'theanine' (a popular nootropic that is very often taken with caffeine to avoid its side-effects), etc.\
                        Another interesting thing that we were hoping to see, is that a lot of the effects and side effects associated with caffeine can be seen on the \
                       Reddit wordcloud - much more so than on the wiki one: 'focus', 'anxiety', 'stimulant', 'sleep', 'awake', 'crash', etc.\
                        Finally, another fascinating thing that we had not thought about, is that a lot of",
                html.Em(" dosage "),
                "information is present (albeit not very readable/understandable in this form)!       ",
            ],
            style={"margin-top": "20pt"},
        ),
        html.H5("Sentiment Analysis and Polarity"),
        html.P(
            children=[
                "Using the ",
                html.A(
                    href="https://textblob.readthedocs.io/en/dev/", children="TextBlob"
                ),
                " library, it's possible to easily extract two key metrics from a blob of text: its ",
                html.Em("polarity"),
                ",i.e. negative vs. positive sentiment, as well as its",
                html.Em(" subjectivity."),
                " By looking at the distribution of these two metrics for a substance, we can learn much about its perception by its users. For instance, here it is for caffeine:",
            ]
        ),
        dcc.Graph(
            figure=sentiment_histograms_from_substance(graph_reddit_gcc, "caffeine")
        ),
        html.P(
            "As you can see, the polarity is almost exclusively positive (greater than zero) - indeed, who doesn't love coffee. Investigating polarities and subjecivities for greater numbers of substances could be an interesting follow-up  project."
        ),
        html.H4("And mixed wordclouds!"),
        html.P(
            "The same approach as above can be applied to just posts that mention two specific nootropics. This makes it possible to see what the most relevant words are for that specific connection."
        ),
        dbc.Container(
            dbc.Row(
                dbc.Col(
                    html.Img(
                        width="100%",
                        src="https://nootropicsnetworks.s3.eu-north-1.amazonaws.com/wordclouds/caffeinetheaning.png",
                    ),
                    width={"size": 8, "offset": 2},
                )
            ),
            className="my-5",
        ),
        html.P(
            [
                "Once again, the thing that impressed us most about the results is that \
                it was possible to find ",
                html.Em("dosage"),
                ' information in these wordclouds - such as "2:1" (probably the ratio of caffeine to theanine).\
                 Despite not really being related to network science, this is perhaps the most interesting practical finding of this assignment:\
                That it may be possible to infer statistics about the actual doses of specific substances that people take, and \
                    possibly correlate those doses with the positivity of the outcomes.\
                This could also be a great follow-up project.',
            ]
        ),
        html.Hr(className="my-5"),
        dbc.Card(
            dbc.CardBody(
                [
                    html.H4(
                        "Try your own: enter the nootropic you're interested in to see the associated wordcloud.",
                        className="card-title",
                    ),
                    dbc.Container(
                        [
                            dbc.Row(
                                dbc.FormGroup(
                                    [
                                        dcc.Dropdown(
                                            id="wordcloud_select_dropdown",
                                            options=[
                                                {"label": i.title(), "value": i}
                                                for i in names_and_synonyms_in_reddit
                                            ],
                                            placeholder="Phenibut, modafinil, ...",
                                        ),
                                        dbc.FormText(
                                            "Type the nootropic you're interested in in the box above. \n Only auto-suggested names are valid."
                                        ),
                                    ]
                                )
                            ),
                            dcc.Loading(
                                dbc.Row(id="selected_wordcloud_container", children=[]),
                            ),
                        ]
                    ),
                ]
            ),
            className="my-5",
        ),
    ]
)


@app.callback(
    Output("selected_wordcloud_container", "children"),
    Input("wordcloud_select_dropdown", "value"),
)
def show_wordcloud_for_nootropic(chosen_nootropic):
    children = []
    if not chosen_nootropic:
        return []
    if chosen_nootropic != synonym_mapping[chosen_nootropic]:
        children.append(
            dbc.Col(
                html.P(
                    f"Note: The name you entered was resolved to its main name, {synonym_mapping[chosen_nootropic]}"
                ),
                className="alert alert-success",
                width=12,
            )
        )
    wordclouds = wordclouds_from_substance(substance_name=chosen_nootropic)
    children += wordclouds
    if len(wordclouds) == 1:
        children.append(
            dbc.Col(
                html.P(
                    "Note: The chosen nootropic was not found in the Reddit network, \
                    so only its  Wikipedia wordcloud is shown."
                ),
                className="alert alert-warning",
                width=12,
            )
        )
    children.append(
        dbc.Col(
            dcc.Graph(
                figure=sentiment_histograms_from_substance(
                    graph_reddit_gcc, chosen_nootropic
                )
            ),
            width=12,
        )
    )
    return children
