from typing import Literal
import dash_core_components as dcc
from dash_core_components.Dropdown import Dropdown
from dash_core_components.Loading import Loading
import dash_html_components as html
from dash_html_components.Hr import Hr
from networkx.algorithms.shortest_paths.generic import shortest_path
from nltk.util import usage
from plotly.subplots import make_subplots
import assets.texts as texts
import dash_bootstrap_components as dbc
from utils.utils import make_table_from_items
from dash.dependencies import Input, Output
from project.library_functions import (
    get_name_by,
    get_top,
    get_top_posts,
)
from app import app
from project.library_functions.config import Config
import urllib
import networkx as nx
import plotly.express as px
import plotly.graph_objects as go
from utils.data import (
    graph_reddit_gcc,
    all_names_and_synonyms,
    synonym_mapping,
    names_and_synonyms_in_reddit,
)


def wordcloud_from_substance(substance_name: str, type: Literal["reddit", "wiki"]):
    name = synonym_mapping[substance_name.lower()]
    path = f"https://nootropicsnetworks.s3.eu-north-1.amazonaws.com/wordclouds/{type}/{urllib.parse.quote_plus(name)}.png"
    return html.Img(src=path, width="100%")


def wordclouds_from_substance(substance_name: str):
    name = synonym_mapping[substance_name.lower()]
    wc_wiki = wordcloud_from_substance(substance_name=substance_name, type="wiki")

    if name in set(graph_reddit_gcc.nodes()):
        res = [
            dbc.Col(wc_wiki, width=6),
            dbc.Col(
                wordcloud_from_substance(substance_name=substance_name, type="reddit"),
                width=6,
            ),
        ]
    else:
        res = [
            dbc.Col(
                wordcloud_from_substance(substance_name=substance_name, type="wiki"),
                width=6,
            ),
        ]
    return res


def sentiment_histograms_from_substance(graph: nx.Graph, substance: str):
    name = synonym_mapping[substance.lower()]
    polarities = graph.nodes[name]["polarity"]
    subjectivities = graph.nodes[name]["subjectivity"]
    plot = make_subplots(
        rows=2,
        cols=1,
        subplot_titles=(
            "Polarity",
            "Subjectivity",
        ),
    )
    plot.add_trace(
        go.Histogram(x=polarities, xbins_size=0.1),
        row=1,
        col=1,
    )
    plot.add_trace(
        go.Histogram(x=subjectivities, xbins_size=0.05),
        row=2,
        col=1,
    )
    plot.update_xaxes(range=[-1, 1], row=1, col=1)
    plot.update_xaxes(range=[0, 1], row=2, col=1)
    return plot


text_analysis_layout = html.Div(
    [
        html.H2("Text Analysis"),
        html.P(
            "Last but not least, the most fun part: what, if anything, can we learn by \
            analizing the text of reddit posts (and wikipedia pages)? We'll present some results first - \
            but if you just want to explore data about the substances you're interested in, \
            scroll to the bottom of the page where there is an interactive playground."
        ),
        html.Hr(),
        html.H3("A case study: Everyone's Favourite Drug"),
        html.P(
            "To illustrate and motivate our investigation, let's take the most popular \
            nootropic in he world as an example: Caffeine. To begin with, let's generate wordclouds for its wikipedia entry and for reddit posts that mention it."
        ),
        html.H4("Cafeinated wordclouds"),
        html.P(
            "The wordclouds below are both generated by comparing how often\
             a given word appears in the wikipedia page/on reddit posts about a\
             specific substance, compared with how often that same word appears on ALL pages or posts (the technicalities are a bit more complicated than that - see the explainer notebook for more info)."
        ),
        dbc.Container(dbc.Row(children=wordclouds_from_substance("caffeine"))),
        html.P(
            "There are some interesting differences between the wordclouds generated from wikipedia and from Reddit:\
                        Interestingly, while both clouds contain names of other drugs/molecules, the way that those chemicals are related to caffeine is different:\
                        the WikiPedia cloud, those aare related to the properties of Caffeine: \
                        'adenosine' (caffeine is an adenosine receptor antagonist), 'theobromine' and 'xanthine' (two metabolic products of caffeine)\
                        etc. On the other hand, the chemicals that apper on the Reddit cloud are mostly substances that are taken togethes or have similar effects: \
                        'modafinil' (another stimulant), 'theanine' (a popular nootropic that is very often taken with caffeine to avoid its side-effects), etc.\
                        Another interesting thing that we were hoping to see, is that a lot of the effects and side effects associated with caffeine can be seen on the \
                        reddit wordcloud - much more so than on the wiki one: 'focus', 'anxiety', 'stimulant', 'sleep', 'awake', 'crash', etc.\
                        Finally, another fascinating thing that we had not thought about, is that a lot of *dosage*in formation is present (albeit not very readable/understandable in this form)!       ",
            style={"margin-top": "20pt"},
        ),
        html.H5("Sentiment Analysis and Polarity"),
        html.P(
            children=[
                "Using the ",
                html.A(
                    href="https://textblob.readthedocs.io/en/dev/", children="TextBlob"
                ),
                " library, it's possible to easily extract two key metrics from a blob of text: its ",
                html.Em("polarity"),
                ", - i.e., negative vs. positive sentiment, as well as its",
                html.Em("subjectivity."),
                " By looking at the distribution of these two metrics for a substance, we can learn much about its perception by its users. For instance, here it is for caffeine:",
            ]
        ),
        dcc.Graph(
            figure=sentiment_histograms_from_substance(graph_reddit_gcc, "caffeine")
        ),
        html.H4("And mixed wordclouds!"),
        html.P(
            "The same approach as above can be applied to just posts that mention two specific nootropics. This makes it possible to see what the most relevant words are for that specific connection."
        ),
        dbc.Container(
            dbc.Row(
                dbc.Col(
                    html.Img(
                        width="100%",
                        src="https://nootropicsnetworks.s3.eu-north-1.amazonaws.com/wordclouds/wordcloud2.png",
                    )
                )
            )
        ),
        html.Hr(),
        dbc.Card(
            dbc.CardBody(
                [
                    html.H4(
                        "Try your own: enter the nootropic you're interested in to see the associated wordcloud.",
                        className="card-title",
                    ),
                    dbc.Container(
                        [
                            dbc.Row(
                                dbc.FormGroup(
                                    [
                                        dcc.Dropdown(
                                            id="wordcloud_select_dropdown",
                                            options=[
                                                {"label": i.title(), "value": i}
                                                for i in names_and_synonyms_in_reddit
                                            ],
                                            placeholder="Phenibut, modafinil, ...",
                                        ),
                                        dbc.FormText(
                                            "Type the nootropic you're interested in in the box above. \n Only auto-suggested names are valid."
                                        ),
                                    ]
                                )
                            ),
                            dcc.Loading(
                                dbc.Row(id="selected_wordcloud_container", children=[]),
                            ),
                        ]
                    ),
                ]
            ),
        ),
    ]
)


@app.callback(
    Output("selected_wordcloud_container", "children"),
    Input("wordcloud_select_dropdown", "value"),
)
def show_wordcloud_for_nootropic(chosen_nootropic):
    children = []
    if not chosen_nootropic:
        return []
    if chosen_nootropic != synonym_mapping[chosen_nootropic]:
        children.append(
            dbc.Col(
                html.P(
                    f"Note: The name you entered was resolved to its main name, {synonym_mapping[chosen_nootropic]}"
                ),
                className="alert alert-success",
                width=12,
            )
        )
    wordclouds = wordclouds_from_substance(substance_name=chosen_nootropic)
    children += wordclouds
    if len(wordclouds) == 1:
        children.append(
            dbc.Col(
                html.P(
                    "Note: The chosen nootropic was not found in the reddit network, \
                    so only its  WikiPedia wordcloud is shown."
                ),
                className="alert alert-warning",
                width=12,
            )
        )
    children.append(
        dbc.Col(
            dcc.Graph(
                figure=sentiment_histograms_from_substance(
                    graph_reddit, chosen_nootropic
                )
            ),
            width=12,
        )
    )
    return children
